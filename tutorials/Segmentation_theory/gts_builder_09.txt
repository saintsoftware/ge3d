The GTS Builder comes with a gts_builder.jpg. In here going to give the theory overview and at the jpg some interface info...

Since the code is used in a very straight foward way, one can build and implement a toold that build the
code for the user. 

In GTS the abstraction layer is outside the programming scoop....

A example can be to develop a database that deals with:

MYSQL
ODBC
MongoDB
Oracle
...etc...

So the final code is not affected by abstraction layers while having the capability to use abstraction layers to develop
the software.

The GTS builder works in a simple way: it holds code snippets insinde folders with a separeted file for which snippets, so
when the builders loads it creates temporary files from the default snippets and the user edit this ones or reset to default's
so it have a code library that automates all for him while not affecting the code efficiency. When is necessary it builds the
app to test.

The temporary code works in a simple way it uses comments so it can be used with any editor:


// GTS Builder start :: character1
$character1;
// GTS builder end

// GTS Builder start :: character2
$character2;
// GTS builder end

// GTS Builder start :: main div, var #main
<div id='main'></div>
// GTS builder end


So when the GTS builder search inside those files it recognise these key phrases and loads the app to the builder:  

Another thing is comments since it, you can still add the other type of comments to the temp files (\* another style */), 
which the GTS builder leave and removes only the builder comment's when building. 

People can have their own style of abstraction library while not affecting the code:

A : load 2 lines of code
B : 3 lines
Ch : 10 lines;
FT : 5 lines;

You are in charge of your own abstraction layer while the code remains the same for all applications. Any one can 
code with the builder because if you not understand the abstraction some one created you can always read directly the code
which is the same. Actually very similar because it's loaded from the same default, so it add that plus to development.

Another stuff was already mention is that bug's are much more easy to fix because, it have all your variables loaded:
Database , database abstraction layer , vars, function, query's,  segments , logic tests, etc...

When for example a query logic do fail to provide a successful result the GTS builder can recognize and inform where is the
mistake and what is doing wrong. Another problem with code development we often need to build a bit more of complexity
to do code tests, so tests could also be build but they will not be there in the live app. They work to develop and fix bugs.

A example of a query in the GTS builder:

$table = "users";
$user_id = 45;
$action  = "SELECT";
$rows = "*";
$where = "user = '$user_id' ";
$limit = "LIMIT 5";

mysqli_query ($db, "$action $rows FROM $table $where $limit"); // builder temporary code, to recognize logic mistakes...
mysqli_query ($db, "SELECT * FROM users WHERE  user_id = '45' LIMIT 5"); // live code

Code will be very high performance efficient while having the capability to work with abstraction layers.

If the build abstraction layer do fail to provide a answer you do not need to wait for a team to debug your code it will
still be there for you to improve it or update, it's a plus and not a absolute solution.

If one did some kind of mistake and need to load back to the GTS builder, can manually add the Builder tags back to the
code and it loads it back.

For example Start a resync on temp builder code;

So you made changes to a couple of functions and you don't want to copy past back to builder. Add the builder tags in 
the specific files functions and request a resync. The builder get only those tags and updates only those tags back to
temp files.

The result is: one can choose to continue to use the editor while remaining the possibility to do some test's inside 
the builder.

